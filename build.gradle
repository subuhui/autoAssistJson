buildscript {
    ext.kotlin_version = '1.4.31'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.4.31'

}

publishPlugin {
    publishPlugin.host = 'http://10.10.17.105/'
}

group 'com.xxz'
version pluginVersion + '-' + ideaVersion

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: "org.jetbrains.intellij"


sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenLocal()
    maven { url "https://maven.aliyun.com/repository/public" }
    mavenCentral()
    maven {
        url "https://www.jetbrains.com/intellij-repository/snapshots/"
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url 'https://jetbrains.bintray.com/intellij-plugin-service'
    }
    maven {
        url 'https://jetbrains.bintray.com/intellij-third-party-dependencies'
    }
    maven {
        url 'https://www.jetbrains.com/intellij-repository/releases'
    }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Test) {
        systemProperty "file.encoding", "UTF-8"
    }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'org.yaml:snakeyaml:1.21'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

def productMatrixFile = "${projectDir.absolutePath}/product-matrix.json"
def jsonFile = new File(productMatrixFile)
if (jsonFile == null) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Unable to read $productMatrixFile, is it missing?")
}

// Fail if the product details file isn't found.
// noinspection UnnecessaryQualifiedReference
def productMatrix = new groovy.json.JsonSlurper().parseText(jsonFile.text)
if (productMatrix == null || !(productMatrix instanceof Map)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Unable to read $productMatrixFile.")
}

// If an ideaVersionPrefix is provided, search for the first matched product and use that.
if (ideaVersionPrefix != '') {
    def productMatrixKeys = productMatrix.keySet() as String[]
    for (productMatrixKey in productMatrixKeys) {
        if (productMatrixKey != null && productMatrixKey.startsWith("${ideaVersionPrefix}.")) {
            ideaVersion = productMatrixKey
            break
        }
    }
}

// Fail if requested version is unsupported.
if (!productMatrix.containsKey(ideaVersion)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Requested IDEA version is unsupported: $ideaVersion")
}

// Determine which branch we're building for.
def productDetails = productMatrix[ideaVersion]
if (productDetails == null || !(productDetails instanceof Map)) {
    // noinspection GroovyAssignabilityCheck
    throw new GradleException("Product details for IDEA version $ideaVersion is missing or invalid.")
}

// Adjust plugin's output file name.
rootProject.setBuildDir("${rootProject.buildDir}/${productDetails.comments}")


System.out.println(
        "\nBuilding plugin ${(pluginVersion)} for IDEA " +
                "version $ideaVersion (branch ${productDetails.comments})\n"
)
System.out.println("Since: ${productDetails.sinceBuild}")
System.out.println("Until: ${productDetails.untilBuild}")
System.out.println("Dart: ${productDetails.dartPluginVersion}")
System.out.println("Flutter: ${productDetails.flutterPluginVersion}\n")
System.out.println("Artifacts output directory: ${rootProject.buildDir}\n")

intellij {
    version = ideaVersion
    def pluginList = ['java', 'terminal', 'sh',
                      "Dart:${productDetails.dartPluginVersion}",
                      "io.flutter:${productDetails.flutterPluginVersion}",
                      "Kotlin"]
    plugins = pluginList
}

patchPluginXml {
    sinceBuild = productDetails.sinceBuild

    untilBuild = productDetails.untilBuild
}